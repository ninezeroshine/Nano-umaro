import React from 'react';
import { useGenerate } from './hooks/useGenerate';
import { useGallery } from './hooks/useGallery';
import type { Mode } from './types/generate';
import { Sidebar } from './components/Sidebar';
import { RightPanel } from './components/RightPanel';
import { Gallery } from './components/Gallery';
import { SkeletonGrid } from './components/SkeletonGrid';
import { useToasts, ToastContainer } from './components/Toasts';
import { generateBlankCanvasDataUrl } from './utils/canvas';

export function AppShell() {
  const gen = useGenerate();
  const gallery = useGallery();
  const toast = useToasts();
  
  // –ò–Ω–∏—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≥–∞–ª–µ—Ä–µ–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
  React.useEffect(() => {
    if (!gallery.data && !gallery.isLoading && !gallery.isError) {
      gallery.refetch();
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏ –≥–∞–ª–µ—Ä–µ–∏
  React.useEffect(() => {
    if (gallery.isError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–∞–ª–µ—Ä–µ–∏:', gallery.error);
    }
  }, [gallery.isError, gallery.error]);

  // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –≤ –æ–¥–∏–Ω –ø–ª–æ—Å–∫–∏–π –º–∞—Å—Å–∏–≤
  const allGalleryImages = React.useMemo(() => {
    return gallery.data?.pages.flatMap(page => page.images.map(img => img.path)) || [];
  }, [gallery.data]);

  const [mode, setMode] = React.useState<Mode>('text-to-image');
  const [prompt, setPrompt] = React.useState('A photorealistic image of a red cat astronaut floating in space');
  const [n, setN] = React.useState(1);
  const [aspectRatio, setAspectRatio] = React.useState('1:1');
  const [imageDataUrls, setImageDataUrls] = React.useState<string[]>([]);
  const [imagePreviews, setImagePreviews] = React.useState<string[]>([]);
  const MAX_IMAGES = 5;

  const onFiles = (files: File[]) => {
    const readers = files.slice(0, MAX_IMAGES - imagePreviews.length).map(file => {
      return new Promise<string>((resolve, reject) => {
        const reader = new FileReader();
        reader.onload = () => resolve(String(reader.result));
        reader.onerror = reject;
        reader.readAsDataURL(file);
      });
    });

    Promise.all(readers).then(newUrls => {
      setImageDataUrls(prev => [...prev, ...newUrls]);
      setImagePreviews(prev => [...prev, ...newUrls]);
    });
  };

  const onClearImage = (index: number) => {
    setImageDataUrls(prev => prev.filter((_, i) => i !== index));
    setImagePreviews(prev => prev.filter((_, i) => i !== index));
  };

  const canGenerate = prompt.trim().length > 0 && n >= 1 && n <= 6 && (mode === 'text-to-image' || imageDataUrls.length > 0);

  const onGenerate = () => {
    if (!canGenerate) return;

    // 1. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–µ–ª—ã–π —Ö–æ–ª—Å—Ç —Å –Ω—É–∂–Ω—ã–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ–º —Å—Ç–æ—Ä–æ–Ω
    const canvasDataUrl = generateBlankCanvasDataUrl(aspectRatio);

    // 2. –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç, –¥–µ–ª–∞—è –µ–≥–æ –∫–æ—Ä–æ—Ç–∫–∏–º –∏ —è—Å–Ω—ã–º
    const modifiedPrompt = `${prompt.trim()} –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω –∫–∞–∫ —É –ø—Ä–∏–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —á–µ—Ä–Ω–æ–≥–æ —Ö–æ–ª—Å—Ç–∞.`;

    // 3. –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    //    - –í —Ä–µ–∂–∏–º–µ T2I - —Ç–æ–ª—å–∫–æ —Ö–æ–ª—Å—Ç
    //    - –í —Ä–µ–∂–∏–º–µ I2I - —Å–Ω–∞—á–∞–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –ø–æ—Ç–æ–º —Ö–æ–ª—Å—Ç (—á—Ç–æ–±—ã –æ–Ω –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–µ–π "–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π")
    const finalImageDataUrls = mode === 'text-to-image' 
      ? [canvasDataUrl] 
      : [...imageDataUrls, canvasDataUrl];
    
    // 4. –§–æ—Ä–º–∏—Ä—É–µ–º payload. –†–µ–∂–∏–º –≤—Å–µ–≥–¥–∞ 'image-to-image', –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω aspect ratio
    const payload = { 
      prompt: modifiedPrompt, 
      n, 
      mode: 'image-to-image' as Mode, // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å—Ç–∞–≤–∏–º —Ä–µ–∂–∏–º I2I
      imageDataUrls: finalImageDataUrls
    };
    
    gen.mutate(
      payload,
      {
        onSuccess: (data) => {
          toast.push({ kind: 'success', text: `–ì–æ—Ç–æ–≤–æ: ${data.images.length} –∏–∑–æ–±—Ä–∞–∂.` });
          // –û–±–Ω–æ–≤–ª—è–µ–º –≥–∞–ª–µ—Ä–µ—é —á–µ—Ä–µ–∑ –±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
          setTimeout(() => gallery.refetch(), 2000);
        },
        onError: (e) => {
          console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', e);
          
          // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ –∏–∑ response
          let errorText = (e as Error).message || '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏';
          let suggestions: string[] | undefined;
          let retryable: boolean | undefined;
          
          try {
            // –ï—Å–ª–∏ –≤ –æ—à–∏–±–∫–µ –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ API
            const errorMessage = (e as any)?.message || '';
            if (errorMessage.includes('–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:')) {
              const parts = errorMessage.split('–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
              errorText = parts[0].trim();
              const suggestionsText = parts[1]?.trim();
              if (suggestionsText) {
                suggestions = suggestionsText
                  .split('‚Ä¢ ')
                  .filter((s: string) => s.trim())
                  .map((s: string) => s.trim());
              }
            }
          } catch (err) {
            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–∞—Ä—Å–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ:', err);
          }
          
          toast.push({ 
            kind: 'error', 
            text: errorText,
            suggestions,
            retryable
          });
        },
      }
    );
  };

  const onRetry = () => {
    gen.reset();
    onGenerate();
  };

  return (
    <div className="ng-shell">
      <Sidebar />
      <main className="ng-main">
        <header className="ng-header">
          <h1>Gemini 2.5 ‚Äî Image Generation</h1>
          {gen.isPending && <div className="progress-text">–ì–µ–Ω–µ—Ä–∞—Ü–∏—è {n > 1 ? `1-${n}` : '1'} –∏–∑ {n}‚Ä¶</div>}
        </header>
        
        {gen.isPending && (
          <div className="progress-container">
            <div className="progress-bar">
              <div className="progress-fill" />
            </div>
          </div>
        )}

        <div className="content">
          {gen.isPending ? (
            <SkeletonGrid count={n} />
          ) : gen.data?.images?.length ? (
            <>
              <Gallery images={gen.data.images} title="–ù–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è" />
              {allGalleryImages.length > 0 ? (
                <Gallery 
                  images={allGalleryImages} 
                  title="–í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è" 
                  showActions={false}
                  onLoadMore={() => gallery.fetchNextPage()}
                  hasMore={gallery.hasNextPage}
                  isLoadingMore={gallery.isFetchingNextPage}
                />
              ) : null}
            </>
          ) : gen.isError ? (
            <>
              <div className="empty-state error-state">
                <div className="icon">‚ö†Ô∏è</div>
                <h3>–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏</h3>
                <p>{gen.error?.message || '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫'}</p>
                <button className="secondary" onClick={onRetry}>–ü–æ–≤—Ç–æ—Ä–∏—Ç—å</button>
              </div>
              {allGalleryImages.length > 0 ? (
                <Gallery 
                  images={allGalleryImages} 
                  title="–í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è" 
                  showActions={false}
                  onLoadMore={() => gallery.fetchNextPage()}
                  hasMore={gallery.hasNextPage}
                  isLoadingMore={gallery.isFetchingNextPage}
                />
              ) : null}
            </>
          ) : (
            <div className="content-with-gallery">
              <div className="empty-state">
                <div className="icon">üé®</div>
                <h3>–ù–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å</h3>
                <p>–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å¬ª</p>
              </div>
              {allGalleryImages.length > 0 ? (
                <Gallery 
                  images={allGalleryImages} 
                  title="–í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è" 
                  showActions={false}
                  onLoadMore={() => gallery.fetchNextPage()}
                  hasMore={gallery.hasNextPage}
                  isLoadingMore={gallery.isFetchingNextPage}
                />
              ) : gallery.isLoading ? (
                <div className="loading-gallery">–ó–∞–≥—Ä—É–∑–∫–∞ –≥–∞–ª–µ—Ä–µ–∏...</div>
              ) : gallery.isError ? (
                <div className="gallery-error">
                  <div className="icon">üìÅ</div>
                  <div>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–∞–ª–µ—Ä–µ–∏: {gallery.error?.message}</div>
                  <button className="secondary" onClick={() => gallery.refetch()}>–ü–æ–≤—Ç–æ—Ä–∏—Ç—å</button>
                </div>
              ) : (
                <div className="no-gallery">
                  <div className="icon">üìÇ</div>
                  <div>–ì–∞–ª–µ—Ä–µ—è –ø—É—Å—Ç–∞</div>
                </div>
              )}
            </div>
          )}
        </div>
      </main>
      
      <RightPanel 
        mode={mode} 
        setMode={setMode} 
        aspectRatio={aspectRatio}
        setAspectRatio={setAspectRatio}
        prompt={prompt} 
        setPrompt={setPrompt} 
        n={n} 
        setN={setN} 
        onFiles={onFiles} 
        previews={imagePreviews}
        onClearImage={onClearImage}
        canGenerate={canGenerate} 
        generating={gen.isPending} 
        onGenerate={onGenerate}
        onCancel={gen.cancel}
        error={gen.isError ? gen.error?.message : undefined}
        onRetry={onRetry}
      />
      
      <ToastContainer toasts={toast.toasts} remove={toast.remove} />
    </div>
  );
}


